dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Ethnicity", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c(, "Campus", "Category", "Ethnicity"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Ethnicity", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
covid%>%
filter(country_code == "US")%>%
geom_plot(aes(x = "cumulative_cases", y="cumulative_cases"))
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Ethnicity", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(ethnicity!="All")
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Ethnicity", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(ethnicity!="All") %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Ethnicity", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!="All") %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Ethnicity", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c(, "Campus", "Category", "Ethnicity"), selected = "Campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Campus", "Category", "Ethnicity"), selected = "Campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Academic Year", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!="All") %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Ethnicity", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Campus", "Category", "Ethnicity"), selected = "Campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Academic Year", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(tidyverse)
library(ggmap)
library(lubridate)
repeat {
commands
if(condition) {
break
}
}
x <- 0                 # Preliminary specification of data object
repeat{                # Head of repeat-loop
x <- x + 1           # Body of repeat-loop
print(x)
if(x >= 10) {        # Break condition of repeat-loop
break
}
}
data <- data.frame(x1 = 1:5,      # Create example data
x2 = 6:10,
x3 = 11:15)
data
data1 <- data                   # Replicate example data
i <- 1                          # Create running index
repeat{                         # Start repeat-loop
data1[ , i] <- data1[ , i] + 100
i <- i + 1
if(i > 2) {
break
}
}
data1
shinyApp(ui, server)
library("tidyverse")
library("shiny")
library("shinydashboard")
library("ggsci")
library("ggplot2")
UC_admit <- readr::read_csv("data/UC_admit.csv")
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Academic_Yr", "Campus", "Category"), selected = "Academic_Yr"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Ethnicity!="All") %>%
ggplot(aes_string(x = "Ethnicity", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Ethnicity", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
setwd("~/Desktop/BIS15W2021_sviswanathan/lab13")
shinyApp(ui, server)
library("tidyverse")
library("shiny")
library("shinydashboard")
library("ggsci")
library("ggplot2")
UC_admit <- readr::read_csv("data/UC_admit.csv")
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Campus", "Category", "Ethnicity"), selected = "Campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Academic Year", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
setwd("~/Desktop/BIS15W2021_sviswanathan/lab13")
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
setwd("~/Desktop/BIS15W2021_sviswanathan/lab13")
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
runApp('~/Lab13Question2.R')
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Campus", "Category", "Ethnicity"), selected = "Campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
library("tidyverse")
library("shiny")
library("shinydashboard")
library("ggsci")
library("ggplot2")
UC_admit <- readr::read_csv("data/UC_admit.csv")
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Campus", "Category", "Ethnicity"), selected = "Campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Academic Year", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library("tidyverse")
library("shiny")
library("shinydashboard")
library("ggsci")
library("ggplot2")
UC_admit <- readr::read_csv("data/UC_admit.csv") %>%
as.factor(Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "University of California"),
dashboardSidebar(),
dashboardBody(
selectInput("y", "Select Filter", choices = c("Campus", "Category", "Ethnicity"), selected = "Campus"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
ggplot(aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill=input$y)) +
geom_col(position="dodge", alpha = 0.8, size=4)+
theme_light(base_size = 18) +
labs(title= "University of California Admissions Data", x="Academic Year", y="Number Admitted", fill = "Legend")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
runApp('~/Lab13Question2.R')
runApp('Lab13Question2.R')
runApp('Lab13Question2.R')
runApp('Lab13Question3.R')
runApp('Lab13Question3.R')
runApp('Lab13Question3.R')
#?iris
data(iris)                          # Loading data frame
head(iris)                          # Head of example data
iris1 <- iris                       # Replicate example data
#?iris
data(iris)                          # Loading data frame
iris1 <- iris # Replicate example data
i <- 1
repeat{
iris1[ , i] <- iris1[ , i] * 10
i <- i + 1
if(!is.numeric(iris1[ , i])){
break
}
}
head(iris1)
x <- 0                  # Preliminary specification of data object
while(x < 10) {         # Head of while-loop
x <- x + 1            # Body of while-loop
print(x)
}
data2 <- data                       # Replicate example data
data2
i <- 1                              # Create running index
while(i <= 2) {                     # Start while-loop
data2[ , i] <- data2[ , i] + 100
i <- i + 1
}
data2
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris   # Replicate example data
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris   # Replicate example data
i <- 1
while(i<=3){
iris2[ ,i] <- iris2[ ,i]*10
i <- i+1
}
head(iris)
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris   # Replicate example data
i <- 1
while(i<=4){
iris2[ ,i] <- iris2[ ,i]*10
i <- i+1
}
head(iris)
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris   # Replicate example data
i <- 1
while(i<=5){
iris2[ ,i] <- iris2[ ,i]*10
i <- i+1
}
head(iris)
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris   # Replicate example data
i <- 1
while(i<=5){
iris2[ ,i] <- iris2[ ,i]*10
i <- i+1
}
head(iris2)
head(iris)                                        # Showing head of data in RStudio console
iris2 <- iris   # Replicate example data
i <- 1
while(i<=4){
iris2[ ,i] <- iris2[ ,i]*10
i <- i+1
}
head(iris2)
for (i in 1:10) {
print(i)
}
data3 <- data                       # Replicate example data
data3
for(i in 1:2) {           # for-loop over columns
data3[ , i] <- data3[ , i] + 100
}
data3
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris                                          # Replicate iris data set
head(iris)                                             # Inspecting iris flower data set
iris3 <- iris# Replicate iris data set
for (i in 2:4){
iris3[,i] <- iris3[,i]*10
}
head(iris3)
data_files <- list.files("data/locations", pattern = "locations-2*", full.names = TRUE)
data_files
# create an empty vector to store those counts
results <- vector(mode = "integer", length = length(data_files))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results[i] <- count
}
results
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
# Start by creating an empty data frame
results <- data.frame(file_name = vector(mode = "character", length = length(data_files)),
count = vector(mode = "integer", length = length(data_files)))
for (i in 1:length(data_files)){
data0 <- read_csv(data_files[i])
count <- nrow(data0)
results$file_name[i] <- data_files[i]
results$count[i] <- count
}
results
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# how to show them on a map?
data_list <- lapply(data_files3, read_csv)
collar_data_all <- bind_rows(data_list)
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()                            # To install core packages or update installed packages
